[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "VolumeViewSet",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "NumeroViewSet",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "SommaireViewset",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "SommaireListView",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "NumeroListView",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "TypeSourceView",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "SourceView",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "ArticleViewSet",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "ArticleListView",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "ValidSubmitArticle",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "PublicationtArticle",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "MostDownloadsArticle",
        "importPath": "review.views",
        "description": "review.views",
        "isExtraImport": true,
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pageContent.views",
        "description": "pageContent.views",
        "isExtraImport": true,
        "detail": "pageContent.views",
        "documentation": {}
    },
    {
        "label": "OuvrageViewSet",
        "importPath": "ouvrage.views",
        "description": "ouvrage.views",
        "isExtraImport": true,
        "detail": "ouvrage.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "importPath": "ouvrage.views",
        "description": "ouvrage.views",
        "isExtraImport": true,
        "detail": "ouvrage.views",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "crop_image",
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "isExtraImport": true,
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "crop_image",
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "isExtraImport": true,
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "edit_height_by_width",
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "isExtraImport": true,
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "CustomPagination",
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "isExtraImport": true,
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "CustomPagination",
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "isExtraImport": true,
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User;",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "Serializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIRequestFactory",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "force_authenticate",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Author",
        "importPath": "author.models",
        "description": "author.models",
        "isExtraImport": true,
        "detail": "author.models",
        "documentation": {}
    },
    {
        "label": "obtain_auth_token",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticatedOrReadOnly",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "swagger_auto_schema",
        "importPath": "drf_yasg.utils",
        "description": "drf_yasg.utils",
        "isExtraImport": true,
        "detail": "drf_yasg.utils",
        "documentation": {}
    },
    {
        "label": "swagger_auto_schema",
        "importPath": "drf_yasg.utils",
        "description": "drf_yasg.utils",
        "isExtraImport": true,
        "detail": "drf_yasg.utils",
        "documentation": {}
    },
    {
        "label": "swagger_auto_schema",
        "importPath": "drf_yasg.utils",
        "description": "drf_yasg.utils",
        "isExtraImport": true,
        "detail": "drf_yasg.utils",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "ListUserAuthorSerializer",
        "importPath": "author.serializers",
        "description": "author.serializers",
        "isExtraImport": true,
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "UserAuthorSerializer",
        "importPath": "author.serializers",
        "description": "author.serializers",
        "isExtraImport": true,
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "UserListSerializer",
        "importPath": "author.serializers",
        "description": "author.serializers",
        "isExtraImport": true,
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "ListUserAuthorSerializer",
        "importPath": "author.serializers",
        "description": "author.serializers",
        "isExtraImport": true,
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "UserAuthorSerializer",
        "importPath": "author.serializers",
        "description": "author.serializers",
        "isExtraImport": true,
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "author.serializers",
        "description": "author.serializers",
        "isExtraImport": true,
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "Base64ToFieleField",
        "importPath": "review.serializers",
        "description": "review.serializers",
        "isExtraImport": true,
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "Base64ToFieleField",
        "importPath": "review.serializers",
        "description": "review.serializers",
        "isExtraImport": true,
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "ouvrage.models",
        "description": "ouvrage.models",
        "isExtraImport": true,
        "detail": "ouvrage.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "ouvrage.models",
        "description": "ouvrage.models",
        "isExtraImport": true,
        "detail": "ouvrage.models",
        "documentation": {}
    },
    {
        "label": "Ouvrage",
        "importPath": "ouvrage.models",
        "description": "ouvrage.models",
        "isExtraImport": true,
        "detail": "ouvrage.models",
        "documentation": {}
    },
    {
        "label": "base64_file",
        "importPath": "author.base64_for_test",
        "description": "author.base64_for_test",
        "isExtraImport": true,
        "detail": "author.base64_for_test",
        "documentation": {}
    },
    {
        "label": "base64_file",
        "importPath": "author.base64_for_test",
        "description": "author.base64_for_test",
        "isExtraImport": true,
        "detail": "author.base64_for_test",
        "documentation": {}
    },
    {
        "label": "base64_file",
        "importPath": "author.base64_for_test",
        "description": "author.base64_for_test",
        "isExtraImport": true,
        "detail": "author.base64_for_test",
        "documentation": {}
    },
    {
        "label": "base64_file",
        "importPath": "author.base64_for_test",
        "description": "author.base64_for_test",
        "isExtraImport": true,
        "detail": "author.base64_for_test",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ReadOnlyModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ReadOnlyModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "apiC2rlf.enum",
        "description": "apiC2rlf.enum",
        "isExtraImport": true,
        "detail": "apiC2rlf.enum",
        "documentation": {}
    },
    {
        "label": "ArticleState",
        "importPath": "apiC2rlf.enum",
        "description": "apiC2rlf.enum",
        "isExtraImport": true,
        "detail": "apiC2rlf.enum",
        "documentation": {}
    },
    {
        "label": "ArticleState",
        "importPath": "apiC2rlf.enum",
        "description": "apiC2rlf.enum",
        "isExtraImport": true,
        "detail": "apiC2rlf.enum",
        "documentation": {}
    },
    {
        "label": "RequestMethod",
        "importPath": "apiC2rlf.enum",
        "description": "apiC2rlf.enum",
        "isExtraImport": true,
        "detail": "apiC2rlf.enum",
        "documentation": {}
    },
    {
        "label": "ArticleState",
        "importPath": "apiC2rlf.enum",
        "description": "apiC2rlf.enum",
        "isExtraImport": true,
        "detail": "apiC2rlf.enum",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Numero",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Volume",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "TypeSource",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Source",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Volume",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Numero",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Sommaire",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Volume",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Numero",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "TypeSource",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Source",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "TypeSource",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Volume",
        "importPath": "review.models",
        "description": "review.models",
        "isExtraImport": true,
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "BASE_URI_API_FOR_TEST",
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "isExtraImport": true,
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "BASE_URI_API_FOR_TEST",
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "isExtraImport": true,
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "apiC2rlf.asgi",
        "description": "apiC2rlf.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "apiC2rlf.asgi",
        "documentation": {}
    },
    {
        "label": "RequestMethod",
        "kind": 6,
        "importPath": "apiC2rlf.enum",
        "description": "apiC2rlf.enum",
        "peekOfCode": "class RequestMethod(Enum):\n    POST = 'POST'\n    PUT = 'PUT'\n    DELETE = 'DELETE'\nclass ArticleState(Enum):\n    INITIALISATION = 1\n    PARRUTION = 2\n    PUBLICATION = 3",
        "detail": "apiC2rlf.enum",
        "documentation": {}
    },
    {
        "label": "ArticleState",
        "kind": 6,
        "importPath": "apiC2rlf.enum",
        "description": "apiC2rlf.enum",
        "peekOfCode": "class ArticleState(Enum):\n    INITIALISATION = 1\n    PARRUTION = 2\n    PUBLICATION = 3",
        "detail": "apiC2rlf.enum",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5s)f8()+t9ewfeph*jytj)gd_o$jl@#3da775j)snyl#^%4+6r'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-5s)f8()+t9ewfeph*jytj)gd_o$jl@#3da775j)snyl#^%4+6r'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n]",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "ROOT_URLCONF = 'apiC2rlf.urls'\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n    'PAGE_SIZE': 15,\n    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',)\n}\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n    'PAGE_SIZE': 15,\n    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',)\n}\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "WSGI_APPLICATION = 'apiC2rlf.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n#if os.environ.get('ENV') == 'PRODUCTION':\n\"\"\"\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'cp2163363p23_c2rlf',   \n        'USER': 'cp2163363p23_bonheur',  ",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'cp2163363p23_c2rlf',   \n        'USER': 'cp2163363p23_bonheur',  \n        'PASSWORD': 'hsbil8vqcABs',\n        'HOST': 'localhost',\n        'PORT': '3306',  \n        'OPTIONS': {\n            'sql_mode': 'STRICT_ALL_TABLES',",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "ISPRODUCTION",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "ISPRODUCTION = True\n\"\"\"\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nISPRODUCTION = False\n# Password validation",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nISPRODUCTION = False\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "ISPRODUCTION",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "ISPRODUCTION = False\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n}",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n}\n# Static files settings\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n}\n# Static files settings\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')\n# Extra places for collectstatic to find static files.",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n}\n# Static files settings\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n}\n# Static files settings\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(PROJECT_ROOT, 'staticfiles'),",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(PROJECT_ROOT, 'staticfiles'),\n)\nBASE_URI_API_FOR_TEST = \"http://localhost:8000/\"",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(PROJECT_ROOT, 'staticfiles'),\n)\nBASE_URI_API_FOR_TEST = \"http://localhost:8000/\"",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "STATICFILES_DIRS = (\n    os.path.join(PROJECT_ROOT, 'staticfiles'),\n)\nBASE_URI_API_FOR_TEST = \"http://localhost:8000/\"",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "BASE_URI_API_FOR_TEST",
        "kind": 5,
        "importPath": "apiC2rlf.settings",
        "description": "apiC2rlf.settings",
        "peekOfCode": "BASE_URI_API_FOR_TEST = \"http://localhost:8000/\"",
        "detail": "apiC2rlf.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "apiC2rlf.urls",
        "description": "apiC2rlf.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"C2RLF API\",\n        default_version='v1',\n        description=\"api For review\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"bonheurmafoundou@gmail.com\"),\n        license=openapi.License(name=\"\"),\n    ),\n    public=True,",
        "detail": "apiC2rlf.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "apiC2rlf.urls",
        "description": "apiC2rlf.urls",
        "peekOfCode": "router = routers.SimpleRouter()\nrouter.register('volume', VolumeViewSet, basename='volume')\nrouter.register('sommaire', SommaireViewset, basename='sommaire')\nrouter.register('sommaire-list', SommaireListView, basename='sommaire_list')\nrouter.register('numero', NumeroViewSet, basename='numero')\nrouter.register('numero-list', NumeroListView, basename='numero_list')\nrouter.register('type_source-list', TypeSourceView, basename='type_source')\nrouter.register('source', SourceView, basename='source')\n#page content\nrouter.register('pages', PageViewSet, basename=\"page\")",
        "detail": "apiC2rlf.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apiC2rlf.urls",
        "description": "apiC2rlf.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('user/', include('author.urls')),\n    path('api/valide/article/<int:pk>/', ValidSubmitArticle.as_view(), name='validate-article'),\n    path('api/publication/article/<int:pk>/', PublicationtArticle.as_view(), name='publication-article'),\n    path('api/popular/article/', MostDownloadsArticle.as_view(), name='popular-article'),\n    path('api/ouvrage/filter/', OuvrageViewSet.as_view({'post': 'filter_ouvrage'}), name='filter-ouvrage'),\n    path('api/article/filter/', ArticleViewSet.as_view({'post': 'filter_article'}), name='filter-article'),\n    path('api/numero/filter/', NumeroViewSet.as_view({'post': 'filter_numero'}), name='numero-filter'),\n    path('api/sommaire/filter/', SommaireViewset.as_view({'post': 'filter_sommaires'}), name='sommaire-filter'),",
        "detail": "apiC2rlf.urls",
        "documentation": {}
    },
    {
        "label": "CustomPagination",
        "kind": 6,
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "peekOfCode": "class CustomPagination(PageNumberPagination):\n    page_size = 1  # Nombre d'éléments par page\n    page_size_query_param = 'page_size'  # Paramètre pour spécifier le nombre d'éléments par page\n    max_page_size = 100  # Nombre maximal d'éléments par page\ndef crop_image(path_image, width, height):\n    try:\n        # Ouvrir l'image avec Pillow\n        image = Image.open(path_image)\n        # Obtenir les dimensions de l'image\n        img_width, img_height = image.size",
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "crop_image",
        "kind": 2,
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "peekOfCode": "def crop_image(path_image, width, height):\n    try:\n        # Ouvrir l'image avec Pillow\n        image = Image.open(path_image)\n        # Obtenir les dimensions de l'image\n        img_width, img_height = image.size\n        # Calculer les coordonnées du recadrage pour centrer l'image\n        left = (img_width - width) / 2\n        top = (img_height - height) / 2\n        right = (img_width + width) / 2",
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "edit_height_by_width",
        "kind": 2,
        "importPath": "apiC2rlf.utils",
        "description": "apiC2rlf.utils",
        "peekOfCode": "def edit_height_by_width(path_file, width_min):\n    \"\"\"edit height of image by new width given\"\"\"\n    img = Image.open(path_file)\n    img = img.convert('RGB')\n    if img.width > width_min:\n        img_height = img.height\n        #get width image are depressed and we depressed this value from \n        #initial image height\n        percentage_remove_px = (100 * (img.width - width_min)) / img.width#percentage of removing px\n        output_height = (percentage_remove_px * img_height) / 100#get px to remove in height",
        "detail": "apiC2rlf.utils",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "apiC2rlf.wsgi",
        "description": "apiC2rlf.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "apiC2rlf.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "author.migrations.0001_initial",
        "description": "author.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Author',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "author.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AuthorConfig",
        "kind": 6,
        "importPath": "author.apps",
        "description": "author.apps",
        "peekOfCode": "class AuthorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'author'",
        "detail": "author.apps",
        "documentation": {}
    },
    {
        "label": "base64_file",
        "kind": 5,
        "importPath": "author.base64_for_test",
        "description": "author.base64_for_test",
        "peekOfCode": "base64_file = \"data:application/pdf;base64,\"",
        "detail": "author.base64_for_test",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "author.models",
        "description": "author.models",
        "peekOfCode": "class Author(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='author')\n    adress = models.CharField(max_length=255, null=True, blank=True)\n    contact = models.CharField(max_length=30, null=True, blank=True)\n    institution = models.CharField(max_length=100)\n    aboutAuthor = models.CharField(max_length=255, null=True, blank=True)\n    photo = models.ImageField(null=True, blank=True, upload_to=\"pictures/avatars\")\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\n        if self.photo:",
        "detail": "author.models",
        "documentation": {}
    },
    {
        "label": "post_save_receiver",
        "kind": 2,
        "importPath": "author.models",
        "description": "author.models",
        "peekOfCode": "def post_save_receiver(sender, instance, **kwargs):\n    import pdb;pdb.set_trace()\n    if instance.photo:\n        system(f'rm {instance.photo.url}')",
        "detail": "author.models",
        "documentation": {}
    },
    {
        "label": "UserAuthorSerializer",
        "kind": 6,
        "importPath": "author.serializers",
        "description": "author.serializers",
        "peekOfCode": "class UserAuthorSerializer(Serializer):\n    username = serializers.CharField(max_length=50, required=False, allow_null=True, allow_blank=True)\n    id = serializers.IntegerField(required=False, allow_null=True)\n    last_name = serializers.CharField(max_length=50)\n    first_name = serializers.CharField(max_length=50)\n    adress = serializers.CharField(max_length=100, required=False, allow_null=True, allow_blank=True)\n    contact = serializers.CharField(max_length=25, required=False, allow_null=True, allow_blank=True)\n    institution = serializers.CharField(max_length=100, allow_null=True, allow_blank=True)\n    aboutAuthor = serializers.CharField(max_length=255, required=False, allow_null=True, allow_blank=True)\n    email = serializers.EmailField()",
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "AuthorSerializer",
        "kind": 6,
        "importPath": "author.serializers",
        "description": "author.serializers",
        "peekOfCode": "class AuthorSerializer(ModelSerializer):\n    class Meta:\n        model = Author\n        fields = '__all__'\nclass UserListSerializer(ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'first_name', 'last_name', 'email']\nclass UserSerializer(ModelSerializer):\n    author = AuthorSerializer()",
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "UserListSerializer",
        "kind": 6,
        "importPath": "author.serializers",
        "description": "author.serializers",
        "peekOfCode": "class UserListSerializer(ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'first_name', 'last_name', 'email']\nclass UserSerializer(ModelSerializer):\n    author = AuthorSerializer()\n    class Meta:\n        model = User\n        fields = '__all__'\nclass ListUserAuthorSerializer(serializers.ListSerializer):",
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "author.serializers",
        "description": "author.serializers",
        "peekOfCode": "class UserSerializer(ModelSerializer):\n    author = AuthorSerializer()\n    class Meta:\n        model = User\n        fields = '__all__'\nclass ListUserAuthorSerializer(serializers.ListSerializer):\n    child = UserAuthorSerializer()",
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "ListUserAuthorSerializer",
        "kind": 6,
        "importPath": "author.serializers",
        "description": "author.serializers",
        "peekOfCode": "class ListUserAuthorSerializer(serializers.ListSerializer):\n    child = UserAuthorSerializer()",
        "detail": "author.serializers",
        "documentation": {}
    },
    {
        "label": "TestAuthor",
        "kind": 6,
        "importPath": "author.tests",
        "description": "author.tests",
        "peekOfCode": "class TestAuthor(APITestCase):\n    uri = 'author'\n    def setUp(self) -> None:\n        self.factory = APIRequestFactory()\n        self.user = User.objects.create_user(email='bonheur@gmail.com', password='1234', username='bonheur')\n        self.author = Author.objects.create(\n            adress='102 rue de test',\n            contact='068314433',\n            institution='dev',\n            aboutAuthor='me and me',",
        "detail": "author.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "author.urls",
        "description": "author.urls",
        "peekOfCode": "urlpatterns = [\n    path('', AuthorAPIView.as_view(), name='author'),\n    path('<int:id_user>', AuthorAPIView.as_view(), name='author_one'),\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]",
        "detail": "author.urls",
        "documentation": {}
    },
    {
        "label": "AuthorAPIView",
        "kind": 6,
        "importPath": "author.views",
        "description": "author.views",
        "peekOfCode": "class AuthorAPIView(APIView):\n    permission_classes = []\n    def get(self, request, id_user: int = 0):\n        \"\"\"Get one user or more\n        Args:\n            id_user (int, optional): if id_user is past we get specific user.\n        Returns:\n            UserSerializer: list or single\n        \"\"\"\n        self.permission_classes = [IsAuthenticated]",
        "detail": "author.views",
        "documentation": {}
    },
    {
        "label": "UserAPIView",
        "kind": 6,
        "importPath": "author.views",
        "description": "author.views",
        "peekOfCode": "class UserAPIView(APIView):\n    def post(self, request):\n        data = {k: v for k, v in request.data.items()}\n        userSerializer = UserCreateSerailizer(data=request.data)\n        if userSerializer.is_valid():\n            try:\n                user = User.objects.create_user(**request.data)\n                serializer = UserSerializer(user)\n            except IntegrityError as err:\n                return Response({\"message\": \"Cet email est déjà utilisé !\"}, status=status.HTTP_409_CONFLICT)",
        "detail": "author.views",
        "documentation": {}
    },
    {
        "label": "CoursConfig",
        "kind": 6,
        "importPath": "cours.apps",
        "description": "cours.apps",
        "peekOfCode": "class CoursConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cours'",
        "detail": "cours.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ouvrage.migrations.0001_initial",
        "description": "ouvrage.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "ouvrage.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ouvrage.migrations.0002_ouvrage_price",
        "description": "ouvrage.migrations.0002_ouvrage_price",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ouvrage', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='ouvrage',\n            name='price',\n            field=models.FloatField(default=0),\n            preserve_default=False,",
        "detail": "ouvrage.migrations.0002_ouvrage_price",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ouvrage.migrations.0003_ouvrage_cover_image_min",
        "description": "ouvrage.migrations.0003_ouvrage_cover_image_min",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ouvrage', '0002_ouvrage_price'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='ouvrage',\n            name='cover_image_min',\n            field=models.ImageField(blank=True, null=True, upload_to='ouvrage/cover/min'),\n        ),",
        "detail": "ouvrage.migrations.0003_ouvrage_cover_image_min",
        "documentation": {}
    },
    {
        "label": "OuvrageConfig",
        "kind": 6,
        "importPath": "ouvrage.apps",
        "description": "ouvrage.apps",
        "peekOfCode": "class OuvrageConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'ouvrage'",
        "detail": "ouvrage.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "ouvrage.models",
        "description": "ouvrage.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=255)\nclass Ouvrage(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ManyToManyField(User, related_name='ouvrages')\n    year_parution = models.CharField(max_length=4, null=True, blank=True)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    presentation = models.TextField()\n    cover_image = models.ImageField(upload_to='ouvrage/cover', null=True, blank=True)\n    pdf_file = models.FileField(upload_to='ouvrage/pdf')",
        "detail": "ouvrage.models",
        "documentation": {}
    },
    {
        "label": "Ouvrage",
        "kind": 6,
        "importPath": "ouvrage.models",
        "description": "ouvrage.models",
        "peekOfCode": "class Ouvrage(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ManyToManyField(User, related_name='ouvrages')\n    year_parution = models.CharField(max_length=4, null=True, blank=True)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    presentation = models.TextField()\n    cover_image = models.ImageField(upload_to='ouvrage/cover', null=True, blank=True)\n    pdf_file = models.FileField(upload_to='ouvrage/pdf')\n    version = models.CharField(max_length=10, null=True, blank=True)\n    edition = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "ouvrage.models",
        "documentation": {}
    },
    {
        "label": "categorySerializer",
        "kind": 6,
        "importPath": "ouvrage.serializers",
        "description": "ouvrage.serializers",
        "peekOfCode": "class categorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = \"__all__\"\n    def validate(self, attrs):\n        catgories = Category.objects.filter(name=attrs['name'])\n        if catgories.exists():\n            raise serializers.ValidationError('Cette categorie existe déjà')\n        return super().validate(attrs)\nclass OuvrageSerializer(serializers.ModelSerializer):",
        "detail": "ouvrage.serializers",
        "documentation": {}
    },
    {
        "label": "OuvrageSerializer",
        "kind": 6,
        "importPath": "ouvrage.serializers",
        "description": "ouvrage.serializers",
        "peekOfCode": "class OuvrageSerializer(serializers.ModelSerializer):\n    author = ListUserAuthorSerializer()\n    pdf_file = Base64ToFieleField()\n    cover_image = Base64ToFieleField(required=False, allow_null=True)\n    class Meta:\n        model = Ouvrage\n        exclude = ['date_creation', 'user']\n    def create(self, validated_data):\n        authors = validated_data.pop('author', None)\n        validated_data['user'] = self.context['request'].user",
        "detail": "ouvrage.serializers",
        "documentation": {}
    },
    {
        "label": "OuvrageSerializerList",
        "kind": 6,
        "importPath": "ouvrage.serializers",
        "description": "ouvrage.serializers",
        "peekOfCode": "class OuvrageSerializerList(serializers.ModelSerializer):\n    author = UserListSerializer(many=True)\n    class Meta:\n        model = Ouvrage\n        fields = [\"title\", 'id', 'year_parution', 'version', 'price', 'author', 'cover_image_min']\nclass OuvrageRetrieveSerializer(serializers.ModelSerializer):\n    author = ListUserAuthorSerializer()\n    user = UserAuthorSerializer()\n    class Meta:\n        model = Ouvrage",
        "detail": "ouvrage.serializers",
        "documentation": {}
    },
    {
        "label": "OuvrageRetrieveSerializer",
        "kind": 6,
        "importPath": "ouvrage.serializers",
        "description": "ouvrage.serializers",
        "peekOfCode": "class OuvrageRetrieveSerializer(serializers.ModelSerializer):\n    author = ListUserAuthorSerializer()\n    user = UserAuthorSerializer()\n    class Meta:\n        model = Ouvrage\n        fields = \"__all__\"\n    def to_representation(self, instance):\n        data = super().to_representation(instance)\n        data['category_retrieve'] = categorySerializer(instance.category).data\n        data['author_retrieve'] = UserAuthorSerializer(instance.author, many=True).data",
        "detail": "ouvrage.serializers",
        "documentation": {}
    },
    {
        "label": "TestCategory",
        "kind": 6,
        "importPath": "ouvrage.tests",
        "description": "ouvrage.tests",
        "peekOfCode": "class TestCategory(APITestCase):\n    uri = reverse_lazy('category-ouvrage-list')\n    def setUp(self) -> None:\n        self.user = User.objects.create_user(username='bonheur', email='bonheur@gmail.com', password='1234')\n        self.superuser = User.objects.create_superuser(username='chris', email='chris@gmail.com', password='1234')\n        self.category = Category.objects.create(**{'name': 'jeunesse'})\n    def test_create_raise_error_if_no_admin(self):\n        self.client.force_authenticate(self.user)\n        #raise error if no superuser\n        response = self.client.post(self.uri, data={'name': 'romans'})",
        "detail": "ouvrage.tests",
        "documentation": {}
    },
    {
        "label": "OuvrageTest",
        "kind": 6,
        "importPath": "ouvrage.tests",
        "description": "ouvrage.tests",
        "peekOfCode": "class OuvrageTest(APITestCase):\n    uri = reverse_lazy('ouvrage-list')\n    def setUp(self) -> None:\n        self.user = User.objects.create_user(username='bonheur', email='bonheur@gmail.com', password='1234')\n        self.superuser = User.objects.create_superuser(username='chris', email='chris@gmail.com', password='1234')\n        self.category = Category.objects.create(**{'name': 'jeunesse'})\n        self.ouvrage_data = {\n            'title': 'La demeure des gouvernantes',\n            'year_parution': '2024',\n            'category': self.category,",
        "detail": "ouvrage.tests",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "ouvrage.views",
        "description": "ouvrage.views",
        "peekOfCode": "class CategoryViewSet(ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = categorySerializer\n    def get_permissions(self):\n        if self.action in ['create', 'update', 'destroy']:\n            permission_classes = [IsAdminUser]\n        else:\n            permission_classes = []\n        return [permission() for permission in permission_classes]\n@swagger_auto_schema(",
        "detail": "ouvrage.views",
        "documentation": {}
    },
    {
        "label": "OuvrageViewSet",
        "kind": 6,
        "importPath": "ouvrage.views",
        "description": "ouvrage.views",
        "peekOfCode": "class OuvrageViewSet(ModelViewSet):\n    queryset = Ouvrage.objects.filter(is_active=True).order_by('-date_creation')\n    def get_serializer_class(self):\n        if self.action in ['create', 'update']:\n            return OuvrageSerializer\n        elif self.action == 'retrieve':\n            return OuvrageRetrieveSerializer\n        return OuvrageSerializerList\n    def get_permissions(self):\n        if self.action in ['create', 'update', 'destroy']:",
        "detail": "ouvrage.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pageContent.migrations.0001_initial",
        "description": "pageContent.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PageContent',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=50, unique=True)),",
        "detail": "pageContent.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PagecontentConfig",
        "kind": 6,
        "importPath": "pageContent.apps",
        "description": "pageContent.apps",
        "peekOfCode": "class PagecontentConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'pageContent'",
        "detail": "pageContent.apps",
        "documentation": {}
    },
    {
        "label": "PageContent",
        "kind": 6,
        "importPath": "pageContent.models",
        "description": "pageContent.models",
        "peekOfCode": "class PageContent(models.Model):\n    title = models.CharField(max_length=50, unique=True)\n    content = models.TextField(null=True, blank=True)\n    date_update = models.DateTimeField(auto_now_add=True)\n    pdf_file = models.FileField(upload_to='pages-content', null=True, blank=True)\n    order = models.SmallIntegerField(default=1)",
        "detail": "pageContent.models",
        "documentation": {}
    },
    {
        "label": "PageSerializer",
        "kind": 6,
        "importPath": "pageContent.serializers",
        "description": "pageContent.serializers",
        "peekOfCode": "class PageSerializer(serializers.ModelSerializer):\n    pdf_file = Base64ToFieleField(required=False, allow_null=True)\n    class Meta:\n        model = PageContent\n        fields = \"__all__\"",
        "detail": "pageContent.serializers",
        "documentation": {}
    },
    {
        "label": "TestPageContent",
        "kind": 6,
        "importPath": "pageContent.tests",
        "description": "pageContent.tests",
        "peekOfCode": "class TestPageContent(APITestCase):\n    uri =  reverse_lazy('page-list')\n    def setUp(self):\n        self.user = User.objects.create_superuser(username='bonheur', email='bonheur@gmail.com', password='1234')\n        self.page_data = {\n            \"title\": \"liens institutitionel\",\n            \"content\": \"comntenuybjks \",\n            \"pdf_file\": base64_file\n        }\n        self.page = PageContent.objects.create(**self.page_data)",
        "detail": "pageContent.tests",
        "documentation": {}
    },
    {
        "label": "PageViewSet",
        "kind": 6,
        "importPath": "pageContent.views",
        "description": "pageContent.views",
        "peekOfCode": "class PageViewSet(ModelViewSet):\n    serializer_class = PageSerializer\n    permission_classes = [IsAdminUser]\n    def get_queryset(self):\n        return PageContent.objects.all().order_by('order')\nclass PageViewSetList(ReadOnlyModelViewSet):\n    serializer_class = PageSerializer\n    def get_queryset(self):\n        return PageContent.objects.all().order_by('order')",
        "detail": "pageContent.views",
        "documentation": {}
    },
    {
        "label": "PageViewSetList",
        "kind": 6,
        "importPath": "pageContent.views",
        "description": "pageContent.views",
        "peekOfCode": "class PageViewSetList(ReadOnlyModelViewSet):\n    serializer_class = PageSerializer\n    def get_queryset(self):\n        return PageContent.objects.all().order_by('order')",
        "detail": "pageContent.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "review.migrations.0001_initial",
        "description": "review.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Numero',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "review.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TestArticle",
        "kind": 6,
        "importPath": "review.tests.tests_article",
        "description": "review.tests.tests_article",
        "peekOfCode": "class TestArticle(APITestCase):\n    URI = reverse_lazy('article-list')\n    PUBLIC_URI = reverse_lazy('articles_list-list')\n    def setUp(self):\n        self.volume = Volume.objects.create(**{\n            \"number\": 1,\n            \"pages_number\": 10,\n            \"volume_year\": 2023,\n        })\n        self.superuser =  User.objects.create_superuser(username=\"chris@gmail.com\", email=\"chris@gmail.com\", password=\"1234\")",
        "detail": "review.tests.tests_article",
        "documentation": {}
    },
    {
        "label": "TestNumero",
        "kind": 6,
        "importPath": "review.tests.tests_numero",
        "description": "review.tests.tests_numero",
        "peekOfCode": "class TestNumero(APITestCase):\n    URI = reverse_lazy('numero-list')\n    def setUp(self):\n        self.superuser = User.objects.create_superuser(\"bonheur@gmail.com\", \"bonheur@gmail.com\", \"1234\")\n        self.user = User.objects.create_user(\"chris@gmail.com\", \"chris@gmail.com\", \"1234\")\n        self.volume = Volume.objects.create(**{\n            \"number\": 1,\n            \"pages_number\": 10,\n            \"volume_year\": 2023,\n        })",
        "detail": "review.tests.tests_numero",
        "documentation": {}
    },
    {
        "label": "TestSommaire",
        "kind": 6,
        "importPath": "review.tests.tests_sommaire",
        "description": "review.tests.tests_sommaire",
        "peekOfCode": "class TestSommaire(APITestCase):\n    URI = reverse_lazy('sommaire-list')\n    def setUp(self):\n        self.superuser =  User.objects.create_superuser(username=\"chris@gmail.com\", email=\"chris@gmail.com\", password=\"1234\")\n        self.user = User.objects.create(username=\"bonheur@gmail.com\", email=\"bonheur@gmail.com\", password=\"1234\")\n        self.user2 = User.objects.create(username=\"bonheur2@gmail.com\", email=\"bonheur2@gmail.com\", password=\"1234\")\n        self.volume = Volume.objects.create(**{\n            \"number\": 1,\n            \"pages_number\": 10,\n            \"volume_year\": 2023,",
        "detail": "review.tests.tests_sommaire",
        "documentation": {}
    },
    {
        "label": "SourceTestCase",
        "kind": 6,
        "importPath": "review.tests.tests_source",
        "description": "review.tests.tests_source",
        "peekOfCode": "class SourceTestCase(APITestCase):\n    uri = reverse_lazy('source-list')\n    def setUp(self):\n        self.user = User.objects.create_user(username='bonheur', email='bonheur@gmail.com', password='1223')\n        self.admin = User.objects.create_superuser(username='chris', email='chris@gmail.com', password='12344')\n        self.type_source = TypeSource.objects.create(type_name=\"journal\")\n        self.source_data = {\n            \"authors\": 'Darius Makeba; Milandu M',\n            \"title\": \"Au pays des loves\",\n            \"city\": \"Pointe-noire\",",
        "detail": "review.tests.tests_source",
        "documentation": {}
    },
    {
        "label": "TestTypeSource",
        "kind": 6,
        "importPath": "review.tests.tests_type_source",
        "description": "review.tests.tests_type_source",
        "peekOfCode": "class TestTypeSource(APITestCase):\n    uri = reverse_lazy('type_source-list')\n    def setUp(self):\n        self.type_source = TypeSource.objects.create(type_name='Journal')\n        self.user = User.objects.create_superuser(username=\"bonheur@gmail.com\", email=\"bonheur@gmail.com\", password=\"1234\")\n        self.type_data = {\n            \"type_name\": \"Livre\"\n        }\n    def test_create(self):\n        before_create = TypeSource.objects.count()",
        "detail": "review.tests.tests_type_source",
        "documentation": {}
    },
    {
        "label": "TestVolume",
        "kind": 6,
        "importPath": "review.tests.tests_volume",
        "description": "review.tests.tests_volume",
        "peekOfCode": "class TestVolume(APITestCase):\n    URI = reverse_lazy('volume-list')\n    def setUp(self) -> None:\n        self.superuser = User.objects.create_superuser(\"bonheur@gmail.com\", \"bonheur@gmail.com\", \"1234\")\n        self.user = User.objects.create_user(\"chris@gmail.com\", \"chris@gmail.com\", \"1234\")\n        self.volume = {\n            \"number\": 1,\n            \"pages_number\": 10,\n            \"volume_year\": 2023,\n        }",
        "detail": "review.tests.tests_volume",
        "documentation": {}
    },
    {
        "label": "ReviewConfig",
        "kind": 6,
        "importPath": "review.apps",
        "description": "review.apps",
        "peekOfCode": "class ReviewConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'review'",
        "detail": "review.apps",
        "documentation": {}
    },
    {
        "label": "Volume",
        "kind": 6,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "class Volume(models.Model):\n    number = models.PositiveSmallIntegerField()\n    datecreation = models.DateTimeField(auto_now_add=True)\n    pages_number = models.PositiveSmallIntegerField()\n    volume_year = models.PositiveIntegerField()\nclass Numero(models.Model):\n    volume = models.ForeignKey(Volume, on_delete=models.CASCADE)\n    datecreation = models.DateField(auto_now_add=True)\n    label = models.CharField(max_length=100, null=True, blank=True)\n    number = models.PositiveSmallIntegerField(unique=True)",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Numero",
        "kind": 6,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "class Numero(models.Model):\n    volume = models.ForeignKey(Volume, on_delete=models.CASCADE)\n    datecreation = models.DateField(auto_now_add=True)\n    label = models.CharField(max_length=100, null=True, blank=True)\n    number = models.PositiveSmallIntegerField(unique=True)\n    def save(self, *args, **kwargs) -> None:\n        label_value = f\"Numéro {self.number} du volume {self.volume.number}\"\n        self.label = label_value\n        super(Numero, self).save(*args, **kwargs)\nclass Sommaire(models.Model):",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Sommaire",
        "kind": 6,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "class Sommaire(models.Model):\n    title = models.CharField(max_length=1000)\n    label = models.CharField(max_length=50, null=True, blank=True)\n    presentation = models.TextField()\n    numero = models.OneToOneField(Numero, on_delete=models.CASCADE)\n    picture = models.ImageField(null=True, blank=True, upload_to=\"pictures/sommaires\")\n    pdf_file = models.FileField(upload_to=\"pdfs/sommaires\")\n    author = models.ManyToManyField(User, related_name='sommaires')\n    def save(self, *args, **kwargs) -> None:\n        self.label = f\"sommaire lié au numero {self.numero.number}\"",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "TypeSource",
        "kind": 6,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "class TypeSource(models.Model):\n    type_name = models.CharField(max_length=50)\nclass Source(models.Model):\n    authors = models.CharField(max_length=255, null=True, blank=True)\n    title = models.CharField(max_length=255, null=True, blank=True)\n    city = models.CharField(max_length=50, null=True, blank=True)\n    year_publication = models.CharField(max_length=4, null=True, blank=True)\n    editor = models.CharField(max_length=255, null=True, blank=True)\n    type_source = models.ForeignKey(TypeSource, on_delete=models.PROTECT, null=True, blank=True)\nclass Reference(models.Model):",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "class Source(models.Model):\n    authors = models.CharField(max_length=255, null=True, blank=True)\n    title = models.CharField(max_length=255, null=True, blank=True)\n    city = models.CharField(max_length=50, null=True, blank=True)\n    year_publication = models.CharField(max_length=4, null=True, blank=True)\n    editor = models.CharField(max_length=255, null=True, blank=True)\n    type_source = models.ForeignKey(TypeSource, on_delete=models.PROTECT, null=True, blank=True)\nclass Reference(models.Model):\n    source = models.OneToOneField(Source, on_delete=models.PROTECT, null=True, blank=True)\n    volume = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Reference",
        "kind": 6,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "class Reference(models.Model):\n    source = models.OneToOneField(Source, on_delete=models.PROTECT, null=True, blank=True)\n    volume = models.CharField(max_length=255, null=True, blank=True)\n    publication = models.CharField(max_length=255, null=True, blank=True)\n    page_begin = models.IntegerField(null=True, blank=True)\n    page_end = models.IntegerField(null=True, blank=True)\n    edition_ref = models.CharField(max_length=255, null=True, blank=True)\nclass Article(models.Model):\n    class State(models.IntegerChoices):\n        INITIALISATION = 1",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Article",
        "kind": 6,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "class Article(models.Model):\n    class State(models.IntegerChoices):\n        INITIALISATION = 1\n        PARRUTION = 2\n        PUBLICATION = 3\n    user = models.ForeignKey(User, on_delete=models.DO_NOTHING)\n    title_fr = models.CharField(max_length=255)\n    title_ang = models.CharField(max_length=255, null=True, blank=True)\n    date_ajout = models.DateTimeField(auto_now_add=True)\n    date_accept = models.DateTimeField(null=True, blank=True)",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "post_delete_receiver",
        "kind": 2,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "def post_delete_receiver(sender, instance, **kwargs):\n    if instance.file_submit:\n        res = os.system(f\"rm media/{instance.file_submit}\")\n    if instance.pdf_file:\n        os.system(f\"rm media/{instance.pdf_file}\")\n\"\"\"\n@receiver(pre_save, sender=Article)\ndef post_delete_receiver(sender, instance, **kwargs):\n    if instance.file_submit:\n        res = os.system(f\"rm media/{instance.file_submit}\")",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "post_delete_receiver",
        "kind": 2,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "def post_delete_receiver(sender, instance, **kwargs):\n    if instance.file_submit:\n        res = os.system(f\"rm media/{instance.file_submit}\")\n\"\"\"",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "review.models",
        "description": "review.models",
        "peekOfCode": "PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\n@receiver(post_delete, sender=Article)\ndef post_delete_receiver(sender, instance, **kwargs):\n    if instance.file_submit:\n        res = os.system(f\"rm media/{instance.file_submit}\")\n    if instance.pdf_file:\n        os.system(f\"rm media/{instance.pdf_file}\")\n\"\"\"\n@receiver(pre_save, sender=Article)\ndef post_delete_receiver(sender, instance, **kwargs):",
        "detail": "review.models",
        "documentation": {}
    },
    {
        "label": "Base64ToFieleField",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class Base64ToFieleField(serializers.FileField):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n    def to_internal_value(self, data):\n        if isinstance(data, str):\n            # If the data is in base64 format, decode it and create a ContentFile\n            try:\n                format, imgstr = data.split(';base64,')  # Ensure that 'data' is prefixed by 'data:image/'\n                ext = format.split('/')[-1]\n                name = format.split('/')[-2]",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "VolumeSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class VolumeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Volume\n        fields = '__all__'\n    def validate(self, data):\n        request = self.context['request']\n        volume = Volume.objects.filter(volume_year=data['volume_year'])\n        if volume.exists():\n            if request.data.get('id') and request.method == RequestMethod.PUT.value:\n                #verif if volume_year conflict is not for the same model",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "NumeroSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class NumeroSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Numero\n        fields = \"__all__\"\n    def validate(self, data, *args, **kwargs):\n        #check that number isn't exist in volume\n        request = self.context['request']\n        number = Numero.objects.filter(number=data['number'])\n        if (number.exists() and request.method == RequestMethod.POST.value) or (request.method == RequestMethod.PUT.value and number.exists() and number[0].id != int(request.data['id'])):\n            raise serializers.ValidationError(f\"Ce nombre de numéro existe déjà.\")",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "NumeroRetrieveSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class NumeroRetrieveSerializer(serializers.ModelSerializer):\n    volume = VolumeSerializer()\n    class Meta:\n        model = Numero\n        fields = \"__all__\"\nclass NumeroSerializerList(serializers.ModelSerializer):\n    class Meta:\n        model = Numero\n        fields = '__all__'\n    def to_representation(self, instance):",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "NumeroSerializerList",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class NumeroSerializerList(serializers.ModelSerializer):\n    class Meta:\n        model = Numero\n        fields = '__all__'\n    def to_representation(self, instance):\n        data = super().to_representation(instance)\n        data['volume_label'] = f\"Vol n॰{instance.volume.number} {instance.volume.volume_year}\"\n        return data\nclass SommaireSerializer(serializers.ModelSerializer):\n    pdf_file = Base64ToFieleField()",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "SommaireSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class SommaireSerializer(serializers.ModelSerializer):\n    pdf_file = Base64ToFieleField()\n    picture = Base64ToFieleField(required=False, allow_null=True)\n    author = ListUserAuthorSerializer()\n    class Meta:\n        model = Sommaire\n        fields = \"__all__\"\n    def validate(self, attrs):\n        request = self.context['request']\n        numero = attrs['numero']",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "SommaireSerializerList",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class SommaireSerializerList(serializers.ModelSerializer):\n    author = UserAuthorSerializer(many=True)\n    class Meta:\n        model = Sommaire\n        fields = '__all__'\n    def to_representation(self, instance):\n        data = super().to_representation(instance)\n        data['numero_ordre'] = instance.numero.number\n        return data\nclass TypeSourceSerializer(serializers.ModelSerializer):",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "TypeSourceSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class TypeSourceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypeSource\n        fields = \"__all__\"\n    def validate(self, attrs):\n        request = self.context['request']\n        type_name = attrs['type_name']\n        type_elt = TypeSource.objects.filter(type_name=type_name)\n        #import pdb; pdb.set_trace()\n        #verify conflict",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "SourceSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class SourceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Source\n        fields = '__all__'\n    def to_representation(self, instance):\n        data = super().to_representation(instance)\n        if isinstance(instance, Source):\n            if instance.type_source:\n                data['type_source_name'] = instance.type_source.type_name\n        return data",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "ReferenceSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class ReferenceSerializer(serializers.ModelSerializer):\n    source = SourceSerializer()\n    class Meta:\n        model = Reference\n        fields = '__all__'\nclass ListReferenceSerializer(serializers.ListSerializer):\n    child = ReferenceSerializer()\nclass ArticleSerializer(serializers.ModelSerializer):\n    authors = ListUserAuthorSerializer()\n    file_submit = Base64ToFieleField(required=False, allow_null=True)",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "ListReferenceSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class ListReferenceSerializer(serializers.ListSerializer):\n    child = ReferenceSerializer()\nclass ArticleSerializer(serializers.ModelSerializer):\n    authors = ListUserAuthorSerializer()\n    file_submit = Base64ToFieleField(required=False, allow_null=True)\n    pdf_file = Base64ToFieleField(required=False, allow_null=True)\n    references = ListReferenceSerializer(required=False)\n    class Meta:\n        model = Article\n        fields = '__all__'",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "ArticleSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class ArticleSerializer(serializers.ModelSerializer):\n    authors = ListUserAuthorSerializer()\n    file_submit = Base64ToFieleField(required=False, allow_null=True)\n    pdf_file = Base64ToFieleField(required=False, allow_null=True)\n    references = ListReferenceSerializer(required=False)\n    class Meta:\n        model = Article\n        fields = '__all__'\n    def create(self, validated_data):\n        nesteed_authors = validated_data.pop('authors', None)",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "UserListSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class UserListSerializer(serializers.ListSerializer):\n    child = UserSerializer()\nclass ArticleSerializerViewOne(serializers.ModelSerializer):\n    user = UserSerializer()\n    authors = UserListSerializer()\n    numero = NumeroRetrieveSerializer()\n    references = ListReferenceSerializer()\n    file_submit = Base64ToFieleField(required=False, allow_null=True)\n    pdf_file = Base64ToFieleField(required=False, allow_null=True)\n    class Meta:",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "ArticleSerializerViewOne",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class ArticleSerializerViewOne(serializers.ModelSerializer):\n    user = UserSerializer()\n    authors = UserListSerializer()\n    numero = NumeroRetrieveSerializer()\n    references = ListReferenceSerializer()\n    file_submit = Base64ToFieleField(required=False, allow_null=True)\n    pdf_file = Base64ToFieleField(required=False, allow_null=True)\n    class Meta:\n        model = Article\n        fields = '__all__'",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "ArticleSerializerList",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class ArticleSerializerList(serializers.ModelSerializer):\n    authors = ListUserAuthorSerializer()\n    class Meta:\n        model = Article\n        fields = \"__all__\"\n    def to_representation(self, instance):\n        data = super().to_representation(instance)\n        if instance.numero:\n            data['numero_ordre'] = instance.numero.number\n        if instance.page_begin and instance.page_end:",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "statisitiqueSerializer",
        "kind": 6,
        "importPath": "review.serializers",
        "description": "review.serializers",
        "peekOfCode": "class statisitiqueSerializer(serializers.Serializer):\n    numero = serializers.IntegerField()\n    sommaire = serializers.IntegerField()\n    article_init = serializers.IntegerField()\n    article_parution = serializers.IntegerField()\n    article_publication = serializers.IntegerField()\n    cours_pdf = serializers.IntegerField()\n    authors_active = serializers.IntegerField()\n    ouvrage = serializers.IntegerField()",
        "detail": "review.serializers",
        "documentation": {}
    },
    {
        "label": "VolumeViewSet",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class VolumeViewSet(ModelViewSet):\n    serializer_class = VolumeSerializer\n    queryset = Volume.objects.all().order_by('-volume_year')\n    def get_permissions(self):\n        if self.action in ['create', 'update', 'destroy']:\n            permission_classes = [IsAdminUser]\n        else:\n            permission_classes = []\n        return [permission() for permission in permission_classes]\n@swagger_auto_schema(",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "NumeroViewSet",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class NumeroViewSet(ModelViewSet):\n    serializer_class = NumeroSerializer\n    permission_classes = []\n    def get_queryset(self, volume_id: int=0):\n        if volume_id != 0: #get numero for volume_id given\n            return Numero.objects.filter(volume=volume_id)\n        return Numero.objects.all().order_by('-number')\n    def get_permissions(self, active_perm=True):\n        if self.action in ['create', 'update', 'destroy'] and active_perm:\n            permission_classes = [IsAdminUser]",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "SommaireViewset",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class SommaireViewset(ModelViewSet):\n    serializer_class = SommaireSerializer\n    permission_classes = []\n    def get_queryset(self):\n        return Sommaire.objects.all().order_by('-numero__number')\n    def create(self, request, *args, **kwargs):\n        self.permission_classes = [IsAdminUser]\n        self.check_permissions(request)\n        return super().create(request, *args, **kwargs)\n    def update(self, request, *args, **kwargs):",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "NumeroListView",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class NumeroListView(ReadOnlyModelViewSet):\n    serializer_class = NumeroSerializerList\n    def get_queryset(self):\n        return Numero.objects.all().order_by('-number')\n@swagger_auto_schema(\n    responses={200: SommaireSerializerList}\n)\nclass SommaireListView(ReadOnlyModelViewSet):\n    serializer_class = SommaireSerializerList\n    def get_queryset(self):",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "SommaireListView",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class SommaireListView(ReadOnlyModelViewSet):\n    serializer_class = SommaireSerializerList\n    def get_queryset(self):\n        return Numero.objects.all().order_by('-number')\nclass TypeSourceView(ModelViewSet):\n    serializer_class = TypeSourceSerializer\n    permission_classes = [IsAdminUser]\n    def get_queryset(self):\n        self.permission_classes = []\n        return TypeSource.objects.all()",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "TypeSourceView",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class TypeSourceView(ModelViewSet):\n    serializer_class = TypeSourceSerializer\n    permission_classes = [IsAdminUser]\n    def get_queryset(self):\n        self.permission_classes = []\n        return TypeSource.objects.all()\nclass SourceView(ModelViewSet):\n    serializer_class = SourceSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    def get_queryset(self):",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "SourceView",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class SourceView(ModelViewSet):\n    serializer_class = SourceSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    def get_queryset(self):\n        return Source.objects.all()\nclass ArticleViewSet(ModelViewSet):\n    permission_classes = [IsAuthenticated]\n    queryset = Article.objects.all()\n    def get_serializer_class(self):\n        if self.action in ['create', 'update'] or self.request.GET.get('retrieve'):",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "ArticleViewSet",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class ArticleViewSet(ModelViewSet):\n    permission_classes = [IsAuthenticated]\n    queryset = Article.objects.all()\n    def get_serializer_class(self):\n        if self.action in ['create', 'update'] or self.request.GET.get('retrieve'):\n            return ArticleSerializer\n        return ArticleSerializerViewOne\n    def filter_article(self, request):\n        self.permission_classes = []\n        self.check_permissions(request)",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "ArticleListView",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class ArticleListView(ReadOnlyModelViewSet):\n    serializer_class = ArticleSerializerList\n    permission_classes = []\n    def get_queryset(self,*args, **kwargs):\n        request = self.request\n        if request.GET.get('state'):\n            state = request.GET.get('state')\n            return Article.objects.filter(state=state).order_by('numero__number')\n        return Article.objects.all().order_by('numero__number')\n@swagger_auto_schema(",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "ValidSubmitArticle",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class ValidSubmitArticle(APIView):\n    permission_classes = [IsAdminUser]\n    def get(self, request, pk):\n        article = get_object_or_404(Article, pk=pk)\n        article.state = ArticleState.PARRUTION.value\n        article.date_accept = datetime.now()\n        article.save()\n        serializer = ArticleSerializerViewOne(article)\n        return Response(serializer.data)\n@swagger_auto_schema(",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "PublicationtArticle",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class PublicationtArticle(APIView):\n    permission_classes = [IsAdminUser]\n    def get(self, request, pk):\n        article = get_object_or_404(Article, pk=pk)\n        if article.state != ArticleState.PUBLICATION.value:\n            article.state = ArticleState.PUBLICATION.value\n            article.date_publication = datetime.now()\n            article.save()\n            serializer = ArticleSerializerViewOne(article)\n            return Response(serializer.data)",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "MostDownloadsArticle",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class MostDownloadsArticle(APIView):\n    permission_classes = []\n    def get(self, request):\n        articles = Article.objects.filter(state=ArticleState.PUBLICATION.value).order_by('-counter_download')[:5]\n        serializer = ArticleSerializerList(articles, many=True)\n        return Response(serializer.data)\n@swagger_auto_schema(\n    responses={200: ArticleSerializerList},\n    request_body=ArticleSerializer\n) ",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "LastArticlePublication",
        "kind": 6,
        "importPath": "review.views",
        "description": "review.views",
        "peekOfCode": "class LastArticlePublication(APIView):\n    permission_classes = []\n    def get(self, request):\n        articles = Article.objects.filter(state=ArticleState.PUBLICATION.value).order_by('-id')[:3]\n        serializer = ArticleSerializerList(articles, many=True)\n        return Response(serializer.data)",
        "detail": "review.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'apiC2rlf.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]